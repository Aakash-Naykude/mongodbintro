equantity operators

db.test.find({moviename : {$eq: "Escape from Fort Bravo"}})
//equal operators

db.test.find({moviename : {$ne: "Escape from Fort Bravo"}})
//not equal operators


db.test.find({id : {$gt: 20}})
//greater thann operators
db.test.find({id : {$gte: 20}})
//greater thann equal to


db.test.find({id : {$lt: 20}})
//less than
db.test.find({id : {$lte: 20}})
//less than equal to



db.test.find({id : {$lte: 20}}, {moviename:1}).pretty()
//this will only return item less than or equal to 20 && there moviename



db.test.find({id : {$lte: 20}}, {moviename:0}).pretty()
//this will return values without moviename


db.test.find({$and : [{id:{$gt:20}}, {"moviegerne" : "Drama"}]}).pretty()
//this will return when both given conditions are true


db.test.find({$or : [{id:{$gt:20}}, {"moviegerne" : "Drama"}]}).pretty()
//one of the condition is true

db.test.find({"moviegerne" : {$not:{$eq:"Comedy"}}}).pretty()
//this will return all element without Comedy movie gerne


db.test.find({$nor:[{id:{$gt:20}}, {"moviegerne" : "Horror"}]}).pretty()
//both condition are not true




db.test.find({id : {$in:[1,2,3,4,5]}}).pretty()
//this will check weather include or not


db.test.find({id : {$in:[1,2,3,4,5]}}).sort({"moviename":1}).pretty()
//this will checkinclude and then sort in ascending order

db.test.find({id : {$in:[1,2,3,4,5]}}).sort({"moviename":-1}).pretty()
//this will checkinclude anf then sort in decending order
db.test.find({id : {$in:[1,2,3,4,5]}}).sort({"moviename":-1, budget:10294}).pretty()
//multiple sorting parameters



db.test.find({"moviename": /Brid/})
//search which have Brid name



db.test.find({id : {$in:[1,2,3,4,5]}}).sort({"moviename":-1}).skip(2).limit(2).pretty()
//this will skip 2 item and will show only two items





db.test.find({$and : [{production:{$gt:2000}}, {budget:{$gt:10000}}]}).pretty()
//greater than 2000 and 10000




db.test.find({$nor:[{production:{$lt:2000}}, {budget:{$lt:10000}}]}).pretty()
//will check nor after 2000 nor greater than 10000




db.test.find({$and : [{production:{$eq:2000}}, {budget:{$eq:12144}}]}).pretty()
//include 2000 year and 12144 budget




db.test.find({$and : [{production:{$gt:2000}}, {production:{$lt:2010}}]}).pretty()
//greater than 2000 and lesser than 2010






db.test.find().sort({moviename:-1}).pretty()
//this will sort in decending order



db.test.find().skip(10).limit(10)
//this will skip 10 and then prind next 10






db.movies.find({}).sort({production:-1, moviename:-1}).pretty().limit(10).forEach(function(doc){db.movies.update({_id: doc._id}, {$unset:{"moviegerne": ""}})})